#include "NoteManager.h"

const SYNTH_STRUCT SynthGlobalStruct[MAX_SYNTHS] = 
{
	{	
		1, 0, 0.f, 0.f, 0.f, 0.f, 1.0f, 1.0f, 0.5f,
		{ ESTAGE_OFF, 0.f, 20.f, 500.f, 1.f, 300.f, 0.3f, 0.0001f },
		{ ESTAGE_OFF, 0.f, 20.f, 500.f, 1.f, 300.f, 0.3f, 0.0001f },
		{}
	},
	{}
};	

unsigned char rawData[698] =
{
	0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01,
	0x03, 0xC0, 0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x02, 0xA4, 0x00, 0xFF,
	0x58, 0x04, 0x04, 0x02, 0x18, 0x08, 0x00, 0xFF, 0x51, 0x03, 0x06, 0x8A,
	0x1B, 0x00, 0xFF, 0x03, 0x05, 0x41, 0x72, 0x70, 0x32, 0x00, 0x00, 0x90,
	0x3F, 0x3C, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x49, 0x3C, 0x82, 0x68, 0x80, 0x49,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x49, 0x3C, 0x82, 0x68, 0x80, 0x49,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x49, 0x3C, 0x82, 0x68, 0x80, 0x49,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x49, 0x3C, 0x82, 0x68, 0x80, 0x49,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x49, 0x3C, 0x82, 0x68, 0x80, 0x49,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x49, 0x3C, 0x82, 0x68, 0x80, 0x49,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x49, 0x3C, 0x82, 0x68, 0x80, 0x49,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x68, 0x90, 0x3F, 0x3C, 0x00, 0x80,
	0x4B, 0x40, 0x82, 0x68, 0x80, 0x3F, 0x40, 0x00, 0x90, 0x42, 0x3C, 0x82,
	0x68, 0x80, 0x42, 0x40, 0x00, 0x90, 0x46, 0x3C, 0x82, 0x68, 0x80, 0x46,
	0x40, 0x00, 0x90, 0x4B, 0x3C, 0x82, 0x5E, 0x80, 0x4B, 0x40, 0x00, 0xFF,
	0x2F, 0x00
};

void
CNoteManager::Initialize(WAVE_FMT WaveFormat)
{
	memcpy(&fmt, &WaveFormat, sizeof(WaveFormat));

	for (size_t i = 0; i < MAX_SYNTHS; i++)
	{
		pSynthBuffers[i][0] = nullptr;
		pSynthBuffers[i][1] = nullptr;
		pEffects[i] = nullptr;
		midiParser[i] = nullptr;
		BufPosition[i] = 0;
		BufSizes[i] = 0;
	}

#if 0
	for (size_t i = 0; i < MAX_SYNTHS; i++)
#else
	size_t i = 0;
#endif
	{
		pEffects[i] = new CEffectsClass;
		midiParser[i] = new MidiRender;
		midiParser[i]->Synthsave.Initialize((SYNTH_STRUCT*)&SynthGlobalStruct[i], WaveFormat.SampleRate);
		midiParser[i]->Render(2, WaveFormat.SampleRate, rawData, sizeof(rawData));
		pSynthBuffers[i][0] = midiParser[i]->Data[0];
		pSynthBuffers[i][1] = midiParser[i]->Data[1];
		BufSizes[i] = midiParser[i]->DataLen;
	}
}

void
CNoteManager::Destroy()
{
	for (size_t i = 0; i < MAX_SYNTHS; i++)
	{
		if (midiParser[i]) delete midiParser[i];

		if (pSynthBuffers[i][0])
		{
			HeapFree(GetProcessHeap(), 0, pSynthBuffers[i][0]);
			HeapFree(GetProcessHeap(), 0, pSynthBuffers[i][1]);
		}
	}
}

void 
CNoteManager::Render(size_t Synth, f32** pBuffer, size_t Frames)
{
	f32* pCurrentSynth[2] = {};
	size_t FramesToProcess = Frames;

	pCurrentSynth[0] = &pSynthBuffers[Synth][0][BufPosition[Synth]];
	pCurrentSynth[1] = &pSynthBuffers[Synth][1][BufPosition[Synth]];

	if (FramesToProcess > BufSizes[Synth] - BufPosition[Synth]) FramesToProcess = BufSizes[Synth] - BufPosition[Synth];

	for (size_t i = 0; i < FramesToProcess; i++)
	{
		pBuffer[0][i] = pCurrentSynth[0][i];
		pBuffer[1][i] = pCurrentSynth[1][i];
	}

	BufPosition[Synth] += FramesToProcess;
}
